import Head from "next/head";
import { Inter } from "@next/font/google";
import { Category, Discount, Penalty, Sport } from "@prisma/client";
import { prisma } from "lib/prisma";
import SingleSelection from "@/components/ui/SingleSelection";
import MiniCard from "@/components/MiniCard";
import { useEffect, useState } from "react";
import {
	Player,
	PlayerSport,
	moreThanTwoPlayers,
	onePlayer,
	swimmingDiscount,
	twoPlayers,
} from "@/utils/calc";
import { divvyUp, mergePlayers, splitPrivateSwimming } from "@/utils/utils";
import Carousel from "react-multi-carousel";
import "react-multi-carousel/lib/styles.css";
import { BiFootball } from "react-icons/bi";
import Card from "@/components/Card";

const inter = Inter({ subsets: ["latin"] });

const responsive = {
	desktop: {
		breakpoint: { max: 3000, min: 1024 },
		items: 6,
		slidesToSlide: 6, // optional, default to 1.
	},
	tablet: {
		breakpoint: { max: 1024, min: 464 },
		items: 4,
		slidesToSlide: 4, // optional, default to 1.
	},
	mobile: {
		breakpoint: { max: 464, min: 0 },
		items: 2,
		slidesToSlide: 2, // optional, default to 1.
	},
};

export async function getStaticProps() {
	try {
		const categories = await prisma.category.findMany({ where: { hidden: false } });
		const discounts = await prisma.discount.findMany();
		const penalties = await prisma.penalty.findMany();
		const sports = await prisma.sport.findMany({
			where: { hidden: false },
			include: {
				DiscountOptions: true,
				Category: true,
				Penalty: true,
			},
		});
		return {
			props: {
				categories,
				discounts,
				penalties,
				sports: sports.map((x) => ({
					...x,
					createdAt: x.createdAt.toString(),
					updatedAt: x.updatedAt.toString(),
				})),
			},
		};
	} catch (error) {
		return {
			props: {},
		};
	}
}

export default function Home({
	categories = [],
	discounts = [],
	penalties = [],
	sports = [],
}: {
	categories: Category[] | null;
	discounts: Discount[] | null;
	penalties: Penalty[] | null;
	sports: PlayerSport[] | null;
}) {
	const [selectedCategoryId, setSelectedCategoryId] = useState<number>(1);
	const [sportsList, setSportsList] = useState<PlayerSport[]>([]);
	const [selectedSportId, setSelectedSportId] = useState<number>();
	const [selectedSportsList, setSelectedSportsList] = useState<PlayerSport[]>([]);
	const [playersResultList, setPlayersResultList] = useState<Player[]>([]);
	const [playerName, setPlayerName] = useState("");
	const [playersList, setPlayersList] = useState<Player[]>([]);

	const onSelectedCategoryChange = (categoryId: number) => {
		setSelectedCategoryId(categoryId);
		const sportsList = sports?.filter((sport) => sport.categoryId === categoryId);
		setSportsList((prev) => {
			if (sportsList) {
				setSelectedSportId(sportsList[0].id);
				return sportsList;
			}
			return [];
		});
	};

	const onSelectedSportChange = (sportId: number) => {
		setSelectedSportId(sportId);
	};

	const onSportAdded = (sportId: Number | undefined) => {
		if (!sportId) return;
		const exist = selectedSportsList.some((sport) => sport.id === sportId);
		if (exist) return;
		const selectedSport = sportsList.find((sport) => sport.id === sportId);

		setSelectedSportsList((prev) => {
			if (selectedSport) {
				return [...prev, selectedSport].sort((s1, s2) =>
					s1.price < s2.price ? 1 : s1.price > s2.price ? -1 : 0
				);
			}
			return prev;
		});
	};

	const newPlayer = () => {
		setPlayersList((prev) => [...prev, { name: playerName, sports: selectedSportsList }]);
		setPlayerName("");
		setSelectedSportsList([]);
	};

	const calculationHandler = () => {
		// const result = moreThanTwoPlayers(playersList);
		// const result = swimmingDiscount(playersList);
		let [swimmingPrivateList, otherSports] = splitPrivateSwimming(playersList);

		swimmingPrivateList = swimmingDiscount(swimmingPrivateList);
		otherSports = moreThanTwoPlayers(otherSports);
		const result = mergePlayers(otherSports, swimmingPrivateList);
		const refracted = result?.map((player) => {
			return {
				name: player.name,
				sports: player.sports.map((sport) => ({
					name: sport.name,
					price: sport.price,
				})),
			};
		}) as Player[];
		setPlayersResultList(refracted);
	};

	useEffect(() => {
		if (categories && sports) {
			const sportsList = sports?.filter((sport) => sport.categoryId === selectedCategoryId);
			if (!sportsList) return;
			setSportsList(sportsList ?? []);
			setSelectedSportId(sportsList[0]?.id);
		}
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, []);

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<h1 className="text-3xl font-bold underline">Hello world!</h1>
			<div className="my-2">
				<Carousel
					swipeable={true}
					draggable={false}
					showDots={false}
					responsive={responsive}
					ssr={true} // means to render carousel on server-side.
					infinite={true}
					keyBoardControl={true}
					customTransition="all .5"
					transitionDuration={500}
					removeArrowOnDeviceType={["tablet", "mobile"]}
					centerMode={true}
					rtl={false}
					containerClass="carousel-container px-40"
					itemClass="carousel-item"
					partialVisible={false}
				>
					{categories?.map((cat) => (
						<MiniCard key={cat.id} title={cat.title ?? ""} icon={<BiFootball />} />
					))}
				</Carousel>
			</div>
			<div className="flex flex-wrap items-center justify-center gap-4 p-8">
				{sportsList.map((sport) => (
					<Card key={sport.id} sport={sport} icon={<BiFootball className="relative w-32 h-32" />} />
				))}
			</div>
			{/* {JSON.stringify(categories, null, 2)} */}
			{/* {categories?.map((cat) => (
				<h1 key={cat.id}>{cat.name}</h1>
			))} */}
			{/* <div className="flex">
				{categories ? categories.map((cat) => <Card key={cat.id} title={cat.name} />) : ""}
			</div> */}
			{categories ? (
				<SingleSelection
					optionsList={categories.map((cat) => (
						<option key={cat.id} value={cat.id}>
							{cat.title}
						</option>
					))}
					value={selectedCategoryId}
					onChange={(e) => onSelectedCategoryChange(Number(e.target.value))}
				/>
			) : (
				""
			)}
			{discounts ? (
				<SingleSelection
					optionsList={discounts.map((dis) => (
						<option key={dis.id} value={dis.id}>
							{dis.title}
						</option>
					))}
				/>
			) : (
				""
			)}
			{penalties ? (
				<SingleSelection
					optionsList={penalties.map((pen) => (
						<option key={pen.id} value={pen.id}>
							{pen.name}
						</option>
					))}
				/>
			) : (
				""
			)}
			{sportsList ? (
				<SingleSelection
					optionsList={sportsList.map((sport) => (
						<option key={sport.id} value={sport.id}>
							{sport.title}
						</option>
					))}
					value={selectedSportId}
					onChange={(e) => onSelectedSportChange(Number(e.target.value))}
				/>
			) : (
				""
			)}
			<div className="flex flex-col gap-4">
				<button
					onClick={() => {
						newPlayer();
						setPlayersList([]);
						setPlayersResultList([]);
					}}
				>
					clear
				</button>
				<button onClick={() => newPlayer()}>New</button>
				<input
					className="bg-gray-500"
					onChange={(e) => setPlayerName(e.target.value)}
					value={playerName}
				/>
				<button onClick={() => onSportAdded(selectedSportId)}>Add</button>
				{JSON.stringify(selectedSportsList, null, 2)}
				<button onClick={() => calculationHandler()}>cal</button>
				{JSON.stringify(playersResultList, null, 2)}
			</div>
		</>
	);
}
